from contextvars import Token

from ess_api_backend.tests.factories import *


# test_views.py - Generated by CodiumAI

"""
Code Analysis:
- - The main goal of the function is to retrieve all products from the database and return them as a JSON response.
- It is an API view that only allows authenticated users to access it, as specified by the IsAuthenticated permission class.
- The function takes a GET request as input.
- It retrieves all products from the Product model using the .all() method.
- It then creates a dictionary containing the products data as a list of dictionaries using the .values() method.
- Finally, it returns a JsonResponse containing the data dictionary.
"""

"""
Test Plan:
- test_authenticated_user_gets_products(): tests that an authenticated user can retrieve products. Tags: [happy path]
- test_response_contains_all_products(): tests that the response contains all the products in the database. Tags: [happy path]
- test_no_products_in_database(): tests that an empty list is returned when there are no products in the database. Tags: [edge case]
- test_unauthenticated_user_gets_error(): tests that an unauthenticated user receives a 401 Unauthorized error. Tags: [edge case]
- test_response_contains_correct_keys(): tests that the response contains the correct keys. Tags: [general behavior]
- test_response_contains_correct_values(): tests that the response contains the correct values. Tags: [general behavior]
- test_token_authentication(): tests with token authentication. Tags: [edge case]
- test_response_status_code_is_200(): tests that the response status code is 200 OK. Tags: [general behavior]
"""


class TestGetProduct:
    def test_authenticated_user_gets_products(self, client, user_factory, product_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)
        products = product_factory.create_batch(3)

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.status_code == 200
        assert len(response.json()['products']) == len(products)

    def test_response_contains_all_products(self, client, user_factory, product_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)
        products = product_factory.create_batch(3)

        # Act
        response = client.get('/get_product/')

        # Assert
        assert all(product in response.json()['products'] for product in products)

    def test_no_products_in_database(self, client, user_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.json()['products'] == []

    def test_unauthenticated_user_gets_error(self, client):
        # Arrange

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.status_code == 401

    def test_response_contains_correct_keys(self, client, user_factory, product_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)
        product = product_factory()

        # Act
        response = client.get('/get_product/')

        # Assert
        assert set(response.json().keys()) == {'products'}

    def test_response_contains_correct_values(self, client, user_factory, product_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)
        product = product_factory()

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.json()['products'][0]['name'] == product.name

    @pytest.mark.django_db
    def test_token_authentication(self, client, user_factory, product_factory):
        # Arrange
        user = user_factory()
        token = Token.objects.create(user=user)
        client.credentials(HTTP_AUTHORIZATION='Token ' + token.key)
        products = product_factory.create_batch(3)

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.status_code == 200
        assert len(response.json()['products']) == len(products)

    def test_response_status_code_is_200(self, client, user_factory):
        # Arrange
        user = user_factory()
        client.force_login(user)

        # Act
        response = client.get('/get_product/')

        # Assert
        assert response.status_code == 200
